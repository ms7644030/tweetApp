server.port=9001
#spring.datasource.url=jdbc:h2:mem:testdb;NON_KEYWORDS=USER
#spring.h2.console.enabled=true
#spring.jpa.defer-datasource-initialization=true
#spring.data.jpa.repositories.bootstrap-mode=default
#spring.datasource.username=username
#spring.datasource.password=password
#spring.jackson.serialization.fail-on-empty-beans=false
#spring.datasource.url=jdbc:mysql://localhost:3306/tweetapp
spring.datasource.url=jdbc:mysql://tweetappdb.cm2uzqhhdc7x.us-west-2.rds.amazonaws.com:3306/tweetapp
#spring.datasource.url=jdbc:mysql://${RDS_HOSTNAME:local}:${RDS_PORT:3306}/${RDS_DB_NAME:tweetapp}
#spring.datasource.username=${RDS_USERNAME:root}

spring.datasource.username=root
#spring.datasource.password=root
spring.datasource.password=password
#spring.datasource.password={RDS_PASSWORD:root}

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.application.name=TWEETAPP
#server.servlet.context-path=/api/pensioner-detail-service

management.endpoints.web.base-path=/manage
server.servlet.context-path=/api/tweetapp-service

## MULTIPART (MultipartProperties)
# Enable multipart uploads
#spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk.
#spring.servlet.multipart.file-size-threshold=2KB
# Max file size.
#spring.servlet.multipart.max-file-size=200MB
# Max Request Size
#spring.servlet.multipart.max-request-size=215MB

spring.mvc.pathmatch.matching-strategy=ant-path-matcher
#KAFKA CONFIGURATION

#spring.kafka.consumer.bootstrap-servers: localhost:9092
#spring.kafka.consumer.group-id: myGroup
#spring.kafka.consumer.auto-offset-reset: earliest
#spring.kafka.consumer.key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
#spring.kafka.consumer.properties.spring.json.trusted.packages=*

#spring.kafka.producer.bootstrap-servers: localhost:9092
#spring.kafka.producer.key-serializer: org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer: org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

#spring.kafka.topic.name=tweets
#spring.kafka.topic-json.name=tweetapp_json

